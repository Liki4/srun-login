name: Packing
on:
  release:
    types: [published]

permissions:
  contents: write

env:
  GOPROXY: "https://proxy.golang.org"

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.20.0'

      - name: Build arm Binary
        shell: bash
        run: |
          go mod tidy
          GOOS=linux GOARCH=arm CGO_ENABLED=0 go build -trimpath -ldflags "-w -s" -o srun-login ./cmd
          file srun-login
      
      - name: Build arm Image
        shell: bash
        run: |
          docker buildx build -t autologin:$VERSION-arm --platform linux/arm --output=type=docker .
          docker save autologin:$VERSION-arm > autologin_$VERSION-arm.tar
          echo "ARM_IMAGE=autologin_$VERSION-arm.tar" >> $GITHUB_ENV
          
      - name: Build arm64 Binary
        shell: bash
        run: |
          go mod tidy
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -trimpath -ldflags "-w -s" -o srun-login ./cmd
          file srun-login
      
      - name: Build arm64 Image
        shell: bash
        run: |
          docker buildx build -t autologin:$VERSION-arm64 --platform linux/arm64 --output=type=docker .
          docker save autologin:$VERSION-arm64 > autologin_$VERSION-arm64.tar
          echo "ARM64_IMAGE=autologin_$VERSION-arm64.tar" >> $GITHUB_ENV
  
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ARM_IMAGE }}
            ${{ env.ARM64_IMAGE }}
